require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"DeckDataSource":[function(require,module,exports){
var Card,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Card = require('DeckDefaultCard');

window.DeckDataSource = (function(superClass) {
  extend(DeckDataSource, superClass);

  function DeckDataSource(opts) {
    if (opts == null) {
      opts = {};
    }
    if (opts.cardViewModel == null) {
      opts.cardViewModel = Card.DeckCard;
    }
    if (opts.info == null) {
      opts.info = null;
    }
    this.cardType = opts.cardViewModel;
    this.view = new Layer({
      name: '__deckDataSourceViewContainer',
      x: 0,
      y: 0,
      clip: true,
      backgroundColor: false
    });
    this.cards = [];
    if (opts.info) {
      this.createCards(opts.info);
    }
  }

  DeckDataSource.define('cardView', {
    get: function() {
      return this.cardType;
    },
    set: function(viewClass) {
      return this.cardType = viewClass;
    }
  });

  DeckDataSource.prototype.createCards = function(infoObj) {
    var c, i, len, obj, p, results, v;
    results = [];
    for (i = 0, len = infoObj.length; i < len; i++) {
      obj = infoObj[i];
      c = new this.cardType({
        name: "DeckCard " + this.cards.length
      });
      c.superLayer = this.view;
      for (p in obj) {
        v = obj[p];
        c[p] = v;
      }
      results.push(this.cards.push(c));
    }
    return results;
  };

  DeckDataSource.prototype.getAll = function() {
    return this.cards;
  };

  return DeckDataSource;

})(Framer.BaseClass);



},{"DeckDefaultCard":"DeckDefaultCard"}],"DeckDefaultCard":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.DeckCard = (function(superClass) {
  extend(DeckCard, superClass);

  function DeckCard(opts) {
    if (opts == null) {
      opts = {};
    }
    opts.width = 680;
    opts.height = 550;
    opts.backgroundColor = 'white';
    opts.shadowY = 8;
    opts.shadowBlur = 8;
    opts.shadowColor = 'rgba(0, 0, 0, .3)';
    if (opts.superLayer == null) {
      opts.superLayer = null;
    }
    DeckCard.__super__.constructor.call(this, opts);
    this.nameField = new Layer({
      backgroundColor: false,
      superLayer: this,
      y: 480,
      width: this.width
    });
    this.nameField.style = {
      'color': '#555',
      'font-size': '20pt',
      'text-align': 'center'
    };
  }

  DeckCard.define('title', {
    set: function(nameStr) {
      return this.nameField.html = nameStr;
    }
  });

  DeckCard.define('img', {
    set: function(imgUrl) {
      var _img;
      return _img = new Layer({
        superLayer: this,
        x: 44,
        y: 44,
        width: this.width - 88,
        height: this.height - 148,
        image: imgUrl
      });
    }
  });

  return DeckCard;

})(Layer);



},{}],"DraggableDeck":[function(require,module,exports){
var Card,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require('DeckDataSource');

Card = require('DeckDefaultCard');

window.DraggableDeck = (function(superClass) {
  var REVEAL_TYPE;

  extend(DraggableDeck, superClass);

  DraggableDeck.DeckEvents = {
    DragStart: 'dragstart',
    DragMove: 'dragging',
    DragEnd: 'dragmove',
    DropLeft: 'dropleft',
    DropRight: 'dropright',
    DropCenter: 'dropcenter',
    Empty: 'empty',
    Next: 'next'
  };

  REVEAL_TYPE = {
    revealAll: 'revealall',
    onebyone: 'onebyone'
  };

  function DraggableDeck(opts) {
    if (opts == null) {
      opts = {};
    }
    if (!opts.dataSource) {
      throw new Error("NO DATA SOURCE? ");
    }
    if (opts.width == null) {
      opts.width = Screen.width;
    }
    if (opts.height == null) {
      opts.height = Screen.height;
    }
    if (opts.backgroundColor == null) {
      opts.backgroundColor = false;
    }
    opts.perspective = 500;
    if (opts.clip == null) {
      opts.clip = false;
    }
    if (opts.paddingY == null) {
      opts.paddingY = 0;
    }
    if (opts.dataSource == null) {
      opts.dataSource = null;
    }
    DraggableDeck.__super__.constructor.call(this, opts);
    opts.verificationFn = null;
    if (opts.startZ == null) {
      opts.startZ = 0;
    }
    if (opts.cardPadding == null) {
      opts.cardPadding = 15;
    }
    if (opts.cardZPadding == null) {
      opts.cardZPadding = 10;
    }
    this.type = REVEAL_TYPE.revealAll;
    this.startZ = opts.startZ;
    this.cardPadding = opts.cardPadding;
    this.cardZPadding = opts.cardZPadding;
    this.paddingY = opts.paddingY;
    this.selectionThreshold = 100;
    this.cardsList = [];
    if (opts.dataSource) {
      this._dataSource = opts.dataSource;
      this.loadCards();
    }
  }

  DraggableDeck.prototype.loadCards = function() {
    var allCards, card, i, j, len, results;
    allCards = this._dataSource.getAll().reverse();
    this.cardsList = [];
    results = [];
    for (i = j = 0, len = allCards.length; j < len; i = ++j) {
      card = allCards[i];
      card.superLayer = this;
      card.centerX();
      card.y = this.paddingY + (allCards.length - i - 1) * this.cardPadding;
      card.z = -this.startZ + (allCards.length - i - 1) * -this.cardZPadding;
      card.startX = card.x;
      card.startY = this.paddingY;
      this.cardsList.push(card);
      results.push(this.makeCardDraggable(card));
    }
    return results;
  };

  DraggableDeck.prototype.nextCard = function(card) {
    var c, i, j, k, len, len1, ref, ref1, results;
    ref = this.cardsList;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      c = ref[i];
      if (c === card) {
        this.cardsList.splice(i, 1);
        break;
      }
    }
    if (this.cardsList.length === 0) {
      this.emit(DraggableDeck.DeckEvents.Empty);
      return;
    }
    ref1 = this.cardsList;
    results = [];
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      c = ref1[i];
      results.push(c.animate({
        properties: {
          y: this.paddingY + (this.cardsList.length - i - 1) * this.cardPadding,
          z: -this.startZ + (this.cardsList.length - i - 1) * -this.cardZPadding
        },
        time: .2
      }));
    }
    return results;
  };

  DraggableDeck.prototype.rejectCard = function(card) {
    var cardOut;
    cardOut = card.animate({
      properties: {
        x: -1400
      },
      curve: "cubic-bezier(0.0, 0.0, 0.2, 1",
      time: 0.2
    });
    if (this.verificationFn) {
      return cardOut.on(Events.AnimationEnd, (function(_this) {
        return function() {
          return _this.nextCard(card);
        };
      })(this));
    } else {
      return this.nextCard(card);
    }
  };

  DraggableDeck.prototype.acceptCard = function(card) {
    var cardOut;
    cardOut = card.animate({
      properties: {
        x: this.width + 1400
      },
      curve: "cubic-bezier(0.0, 0.0, 0.2, 1",
      time: 0.2
    });
    if (this.verificationFn) {
      return cardOut.on(Events.AnimationEnd, (function(_this) {
        return function() {
          if (!_this.verificationFn(card)) {
            return _this.nextCard(card);
          }
        };
      })(this));
    } else {
      return this.nextCard(card);
    }
  };

  DraggableDeck.prototype.checkMatch = function(card) {
    return false;
  };

  DraggableDeck.prototype.makeCardDraggable = function(card) {
    card.draggable.enabled = true;
    card.draggable.constraints = {
      x: card.x,
      y: card.y,
      width: 1015,
      height: 955
    };
    card.draggable.overdragScale = 1.1;
    card.on(Events.DragStart, (function(_this) {
      return function() {
        return _this.emit(DraggableDeck.DeckEvents.DragStart);
      };
    })(this));
    card.on(Events.Drag, (function(_this) {
      return function() {
        var end, eventObj, start;
        eventObj = {
          x: card.x,
          side: 'neutral'
        };
        if (card.x > card.draggable.constraints.x) {
          start = card.draggable.constraints.x;
          end = card.draggable.constraints.x + card.width / 2;
          card.rotation = Utils.modulate(card.x, [start, 1080], [0, 14], true);
          eventObj.left = Utils.modulate(card.x, [start, end], [0, -1], true);
          eventObj.right = Utils.modulate(card.x, [start, end], [0, 1], true);
        } else if (card.x <= card.draggable.constraints.x) {
          start = card.draggable.constraints.x;
          end = card.draggable.constraints.x - card.width / 2;
          card.rotation = Utils.modulate(card.x, [start, -1080], [0, -14], true);
          eventObj.left = Utils.modulate(card.x, [start, end], [0, 1], true);
          eventObj.right = Utils.modulate(card.x, [start, end], [0, -1], true);
        }
        card.scale = Utils.modulate(card.x, [start, end], [1, 0.9], true);
        if (Math.abs(card.x - card.draggable.constraints.x) > _this.selectionThreshold) {
          eventObj.side = card.x < card.draggable.constraints.x ? 'left' : 'right';
        }
        return _this.emit(DraggableDeck.DeckEvents.DragMove, eventObj);
      };
    })(this));
    return card.on(Events.DragEnd, (function(_this) {
      return function() {
        if (card.x < -350) {
          _this.rejectCard(card);
          _this.emit(DraggableDeck.DeckEvents.DropLeft);
        } else if (card.x > 380) {
          _this.acceptCard(card);
          _this.emit(DraggableDeck.DeckEvents.DropRight);
        } else {
          _this.emit(DraggableDeck.DeckEvents.DropCenter);
          card.animate({
            properties: {
              x: card.startX,
              y: card.startY,
              rotation: 0,
              opacity: 1,
              scale: 1
            },
            curve: "cubic-bezier(0.0, 0.0, 0.2, 1",
            time: 0.4
          });
        }
        return _this.emit(DraggableDeck.DeckEvents.DragEnd);
      };
    })(this));
  };

  return DraggableDeck;

})(Framer.Layer);



},{"DeckDataSource":"DeckDataSource","DeckDefaultCard":"DeckDefaultCard"}]},{},[])
//# sourceMappingURL=data:application/json;base64,
